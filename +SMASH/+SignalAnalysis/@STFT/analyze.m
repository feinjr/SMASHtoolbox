% ANALYZE Apply local spectral analysis
%
% This method performs local spectra analysis on a STFT object.  Analysis
% parameters are defined by the FFToptions and Duration properties of the
% source object.
%     >> result=analyze(object);
% The output "result" is an Image object containing spectra from the
% partitions of the source object
%
% Results generated by this method can be passed to a post-processing
% function (specified as a function handle).
%     >> result=analyze(object,@myfunc);
% The post-processing function must accept four inputs as shown in the
% following example.
%     function out=myfunc(f,y,t,s)
%        [value,index]=max(power);
%        location=frequency(index);
%        out=[location; value];
%     end
% The first two inputs (f and y) are the frequency and local
% power/transform arrays.  The second two inputs (t and s) carry the local
% time and windowed signal arrays; these inputs are not used in the
% example.  The post-processing function returns the location and value of
% the largest spectral value as a column vector.  These outputs are
% collected into a SignalGroup group object in the final result.
%
% See also STFT, partition, preview, track, ImageAnalysis.Image,
% SignalAnalysis.SignalGroup
%

%
% created November 12, 2014 by Daniel Dolan (Sandia National Laboratories)
% revised February 16, 2015 by Daniel Dolan 
%   -incorporating PDV class capabilties
%
function [result,frequency]=analyze(object,targetfunc,normalization)

% manage input
if (nargin<2)
    targetfunc=[];
end

if (nargin<3) || isempty(normalization)
    normalization='global';
end

% detect down sampling 
frequency=[];
local=object;
localSize=object.Partition.Points;
local.Grid=transpose(1:localSize);
local.Data=zeros(localSize,1);
local=limit(local,'all');

[~,~,FFToption,downsample]=fft(local,local.FFToptions);
if downsample
    warning('SMASH:FFTdownsample',...
        'Down sampling saves memory but may be slow');
end

% perform analysis
frequency=[];
    function output=local_function(time,signal)
        local.Grid=time;
        local.Data=signal;
        [frequency,output]=fft(local,FFToption);       
        if ~isempty(targetfunc)           
            output=feval(targetfunc,frequency,output,time,signal);
        end  
    end
result=analyze@SMASH.SignalAnalysis.ShortTime(object,@local_function);

if isempty(targetfunc)
    result=SMASH.ImageAnalysis.Image(...
        result.Grid,transpose(frequency),transpose(result.Data));
    result.GraphicOptions.YDir='normal';
    result.Grid1Label='Time';
    result.Grid2Label='Frequency';
    switch normalization
        case 'none'
            % do nothing
        case 'global'
            temp=abs(result.Data);
            result.Data=result.Data/max(temp(:));
            if strcmpi(object.FFToptions.SpectrumType,'power')
                result.DataLim=[-60 0];
                result.DataScale='dB';
            end
        otherwise
            error('ERROR: invalid normalization requested');
    end    
else
    % use SignalGroup object as is
end

end