% view Display cloud data
%
% This method graphical displays cloud data in a triangular array of plots.
% Plots showing variation within individual variables are on the diagonal,
% while off-diagonal plots show mutual variations betwen variable pairs.
% Standard use of this method:
%     view(object);
% generates 1D and 2D histograms.
%
% Additional views can be created with the following settings.
%     view(object,DiagonalPlots,CrossPlots);
% Diagonal plots (1D) can be:
%   'histogram' : histogram plots 
%   'density'   : density estimate plots (Gaussian kernel)
% Cross plots (2D) can be:
%   'histogram' : histogram plots
%   'density'   : density estimates plots (Gaussian kernel)
%   'ellipse'   : Bounding quasi-ellipse plots
%   'points'    : cloud point plots
% Histograms and density plots are based on NumberBins property; increasing
% this number creates a finer scale representation.  Ellipse plots are
% based on the EllipseSpan property, which controls the fraction of cloud
% point inside the ellipse.
%
% The default orientation of the plot array is upper triangular.  The
% fourth input can be used to change to a lower triangular array.
%     view(object,DiagonalPlots,CrossPlots,'upper'); % default
%     view(object,DiagonalPlots,CrossPlots,'lower');
%
% Graphic handles for the plots generated by this method are available as
% outputs.
%     [hdiagonal,hcross]=view(...); % return graphic handles 
%
% See also Cloud
%

%
% created August 5, 2014 by Daniel Dolan (Sandia National Laboratories)
% revised July 6, 2015 by Daniel Dolan
%   -changed to a triangular plot array
function varargout=view(object,DiagonalPlots,CrossPlots,orientation)

% manage input
if (nargin<2) || isempty(DiagonalPlots)
    DiagonalPlots='histogram';
end
test=strcmpi(DiagonalPlots,'histogram') ...
    || strcmpi(DiagonalPlots,'density');
assert(test,'ERROR: invalid diagonal plot setting');
DiagonalPlots=lower(DiagonalPlots);

if (nargin<3) || isempty(CrossPlots)
    CrossPlots='histogram';  
end
test=strcmpi(CrossPlots,'points')      ...
    || strcmpi(CrossPlots,'ellipse') ...
    || strcmpi(CrossPlots,'histogram') ...
    || strcmpi(CrossPlots,'density');
assert(test,'ERROR: invalid cross plot setting');
CrossPlots=lower(CrossPlots);

if (nargin<4) || isempty(orientation)
    orientation='upper';
end
assert(strcmpi(orientation,'lower') || strcmpi(orientation,'upper'),...
    'ERROR: invalid orientation');
orientation=lower(orientation);

% manage density widths
width=nan(1,object.NumberVariables);
if strcmp(DiagonalPlots,'density') || strcmp(CrossPlots,'density')
    for m=1:object.NumberVariables
        low=min(object.Data(:,m));
        high=max(object.Data(:,m));
        width(m)=(high-low)/object.NumberBins;
    end
end

% create plots
figure;

hdiagonal=[];
hcross=[];
N=object.NumberVariables;
for m=1:N
    % single variable plots (diagonal)
    index=sub2ind([N N],m,m);
    hdiagonal(end+1)=subplot(N,N,index); %#ok<AGROW>
    box on;
    switch DiagonalPlots
        case 'histogram'
            [count,xbin]=histogram(object,m,'xbin',object.NumberBins);           
            ylabel('Counts');
        case 'density'
            [count,xbin]=density(object,m,width(m));
            ylabel('Density');
    end
    line(xbin,count,'Color','k');
    temp=sprintf('%s ',object.VariableName{m});
    xlabel(temp);    
    % cross variable plots
    for n=(m+1):N
        switch orientation
            case 'lower'
                index=sub2ind([N N],m,n); % lower triangle
            case 'upper'
                index=sub2ind([N N],n,m); % upper triangle
        end
        hcross(end+1)=subplot(N,N,index); %#ok<AGROW>
        box on;
        switch CrossPlots
            case 'points'
                line(object.Data(:,m),object.Data(:,n),...
                    'LineStyle','none','Marker','.','Color','k');
            case 'histogram'
                [count,xbin,ybin]=histogram(object,[m n],...
                    'xbin',object.NumberBins,'ybin',object.NumberBins);
                imagesc(xbin,ybin,count);
                set(gca,'YDir','normal');
            case 'density'
                [count,xbin,ybin]=density(object,[m n],...
                    width([m n]));
                imagesc(xbin,ybin,count);
                set(gca,'YDir','normal');
            case 'ellipse'
                [x,y]=ellipse(object,[m n],object.EllipseSpan);
                line(x,y,'Color','k');
        end
        temp=sprintf('%s ',object.VariableName{m});
        xlabel(temp);
        temp=sprintf('%s ',object.VariableName{n});
        ylabel(temp);
        daspect([1 1 1]);
        pbaspect([1 1 1]);
    end
end

% handle output
if nargout>0
    varargout{1}=hdiagonal;
    varargout{2}=hcross;
end

end