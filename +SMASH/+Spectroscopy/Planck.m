% Planck Calculate emission using Planck's law
%
% This function calculates the radiation emitted by an object based on its
% temperature and emissivity.  The spectral radiance generated by an ideal
% emitter (a black body) follows Plank's law:
%     dLdxBB(x,T) = c1/(x^5 * (exp(c2/(x*T))-1)
% where x is wavelength and T is temperature.  Real objects emit less than
% a black body at the same temperature, so spectral radiance is modulated
% by an emissivity function that ranges from 0 to 1.
%     dLxdx(x,T) = E(x) dLdxBB(x,T)
%
% To calculate the spectral radiance, one must specify an array of
% wavelenghs (in nanometers) and a temperature (in Kelvin).
%     >> radiance=Planck(wavelength,temperature);
% The output is an array of spectral radiance values for each specified
% wavelength in units of watts per square meter per steradian per
% nanometer.
%
% If no emissivity is specified, the calculation assumes an emissivity of 1
% at every wavelength.  Emissivity can be specified as a constant:
%     >> radiance=Planck(wavelength,temperature,0.50);
% or as an array (size must match the wavelength array). 
%     >> radiance=Planck(wavelength,temperature,emissivity);
% An emissivity function can also be specified using a handle:
%     >> radiance=Planck(wavelength,temperature,@myfunc);
% where "myfunc" accepts an array of wavelengths and returns an array of
% the same size.
%
% Calling this function with no inputs and no outputs:
%     >> Planck;
% launches a dialog box for interactively plotting Planck curves.
% 
% see also Spectroscopy
%

%
% created April 17, 2015 by Daniel Dolan and Tommy Ao (Sandia National Laboratories)
%
function varargout=Planck(varargin)

% manage input
if (nargin==0) && (nargout==0)
    guiPlanck;
    return
end

assert(nargin>=2,'ERROR: wavelength and temperature must be specified');

wavelength=varargin{1};
assert(isnumeric(wavelength) && all(wavelength>0),...
    'ERROR: invalid wavelength value(s)');

temperature=varargin{2};
if isempty(temperature) || (temperature<=0)
    error('ERROR: Invalid temperature value');
end

emissivity=[];
if nargin>=3
    emissivity=varargin{3};
end
if isempty(emissivity)
    emissivity=ones(size(wavelength));
elseif isnumeric(emissivity)
    if isscalar(emissivity)
        emissivity=repmat(emissivity,size(wavelength));
    end
    try
        emissivity=reshape(emissivity,size(wavelength));
    catch
        error('ERROR: emissivity is inconsistent with wavelength');
    end
elseif isa(emissivity,'function_handle')
    emissivity=feval(emissivity,wavelength); 
end
assert(all((emissivity>=0) & (emissivity<=1)),...
    'ERROR: invalid emissivity value(s)');

% physical constants
c1=1.1911e8; % W*um^4/m^2/sr
c2=1.4388e4; % um*K

% calculation
wavelength=wavelength/1e3; % convert nm to um
radiance=c1./wavelength.^5./(exp(c2./(wavelength*temperature))-1); % [W/m^2/sr/um]
radiance=radiance/1e3; % [W/m^2/sr/um]
radiance=radiance.*emissivity;

% manage output
if nargout>0
    varargout{1}=radiance;
end

end

function guiPlanck(varargin)

% determine if GUI already exists
h=findall(0,'Type','figure','Tag','guiPlanck');
if ishandle(h)
    figure(h);
    return
end

% create dialog box
diaPlanck=SMASH.MUI.Dialog;
diaPlanck.Hidden=true;
diaPlanck.Name='Planck radiation';
set(diaPlanck.Handle,'Tag','guiPlanck');

% add dialog edit blocks
wavelength1=10;
h=addblock(diaPlanck,'edit','Min Wavelength (nm)',20);
Wavelength1Edit=h(2);
set(Wavelength1Edit,'String',wavelength1);
wavelength2=1000;
h=addblock(diaPlanck,'edit','Max Wavelength (nm)',20);
Wavelength2Edit=h(2);
set(Wavelength2Edit,'String',wavelength2);
temperature=10000;
h=addblock(diaPlanck,'edit','Temperature (K)',20);
TemperatureEdit=h(2);
set(TemperatureEdit,'String',temperature);
emissivity=1;
h=addblock(diaPlanck,'edit','Emissivity',20);
EmissivityEdit=h(2);
set(EmissivityEdit,'String',emissivity);

% add dialog New Plot check box
h=addblock(diaPlanck,'check','Use new figure');
NewPlotCheck=h(1);
set(NewPlotCheck,'Value',0);

% add dialog Update button
h=addblock(diaPlanck,'button',' Plot curve ');
set(h,'Callback',@UpdateCallback);
    function UpdateCallback(varargin)
        value=probe(diaPlanck);
        wavelength1=sscanf(value{1},'%g');
        wavelength2=sscanf(value{2},'%g');
        temperature=sscanf(value{3},'%g');
        emissivity=sscanf(value{4},'%g');
        newfig=value{5};
        % calculate Planck radiance
        wavelength=linspace(wavelength1,wavelength2,1000);
        radiance=SMASH.Spectroscopy.Planck(wavelength,temperature,emissivity);
        % create figure
        if isempty(figPlanck) || ~ishandle(figPlanck.Handle) || (newfig==1)
            figPlanck=SMASH.MUI.Figure();
            figPlanck.Name='Planck radiation';  
            axes('Box','on');
        end
        figure(figPlanck.Handle);
        locate(figPlanck,'eastoutside',diaPlanck.Handle);
        if (newfig==1) % plot new figure
            newplot; 
            hline=[]; hlabel=[];
            hline{1}=line(wavelength,radiance);
            hlabel{1}=sprintf('T = %g K, emis. = %g',temperature,emissivity);
        else % add plot to current figure
            hlabel=getappdata(figPlanck,'Label');
            hline=getappdata(figPlanck,'Line');
            hline{end+1}=line(wavelength,radiance);
            hlabel{end+1}=sprintf('T = %g K, emis. = %g',temperature,emissivity);
        end
        setappdata(figPlanck,'Label',hlabel);
        setappdata(figPlanck,'Line',hline);
        %map=jet(max(length(hline),10));
        map=lines(max(length(hline),10));
        for n=length(hline):-1:1
            %length(hline)
            set(hline{n},'Color',map(n,:));
        end
        legend(hlabel{:});
        axis('auto');
        xlabel('Wavelength (nm)');
        ylabel('Spectral Radiance (W·sr^{-1}·m^{-2}·nm^{-1})');
        title('Planck curves');       
    end

% add dialog Done button
h=addblock(diaPlanck,'button',' Done ');
set(h,'Callback',@DoneCallback);
    function DoneCallback(varargin)
        delete(diaPlanck);
        delete(figPlanck);
    end

% show dialog box
locate(diaPlanck,'center');
diaPlanck.Hidden=false;

figPlanck=[];

end